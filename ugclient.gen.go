// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for ContentUploadStatus.
const (
	Failed  ContentUploadStatus = "failed"
	None    ContentUploadStatus = "none"
	Pending ContentUploadStatus = "pending"
	Success ContentUploadStatus = "success"
)

// Defines values for ContentVisibility.
const (
	Hidden       ContentVisibility = "hidden"
	Private      ContentVisibility = "private"
	PublicGame   ContentVisibility = "publicGame"
	PublicGlobal ContentVisibility = "publicGlobal"
)

// Increase the version of a content by 1
type AddVersionRequest struct {
	// A base64 encoded representation of the Content binary
	// that will be uploaded. Used as a checksum.
	ContentMd5Hash string `json:"contentMd5Hash"`

	// A base64 encoded representation of the Thumbnail file
	// that will be uploaded. Used as a checksum.
	ThumbnailMd5Hash *string `json:"thumbnailMd5Hash"`
}

// ApiErrorInfo defines model for ApiErrorInfo.
type ApiErrorInfo struct {
	Detail  *string   `json:"detail"`
	Details *[]string `json:"details"`
	Status  *int32    `json:"status,omitempty"`
	Title   *string   `json:"title"`
}

// Response for getting content info
type ContentDTO struct {
	AssetUploadStatus *ContentUploadStatus `json:"assetUploadStatus,omitempty"`

	// Average user rating
	AverageRating *float32 `json:"averageRating"`

	// Md5 hash of the content binary
	ContentMd5Hash *string `json:"contentMd5Hash"`

	// Date content was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Date content was soft deleted
	DeletedAt *time.Time `json:"deletedAt"`

	// Description
	Description *string `json:"description"`

	// Download url for raw content
	DownloadUrl *string `json:"downloadUrl"`

	// Owning environment id
	EnvironmentId string `json:"environmentId"`

	// Content item guid
	Id string `json:"id"`

	// User is subscribed
	IsUserSubscribed *bool `json:"isUserSubscribed,omitempty"`

	// Display name
	Name *string `json:"name"`

	// Account id that uploaded content
	OwnerAccountId string `json:"ownerAccountId"`

	// Content portal url
	PortalUrl *string `json:"portalUrl"`

	// Owning project id
	ProjectId string `json:"projectId"`

	// Number of user ratings
	RatingCount *int32 `json:"ratingCount"`

	// The amount of players who have reported this content
	ReportsCount *int32 `json:"reportsCount"`

	// Number of subscriptions
	SubscriptionCount *int32 `json:"subscriptionCount"`

	// Tag Ids
	Tags *[]TagDTO `json:"tags"`

	// Md5 hash of the content thumbnail
	ThumbnailMd5Hash      *string              `json:"thumbnailMd5Hash"`
	ThumbnailUploadStatus *ContentUploadStatus `json:"thumbnailUploadStatus,omitempty"`

	// Image url for thumbnail
	ThumbnailUrl *string `json:"thumbnailUrl"`

	// Date content was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Current live version of content
	Version *string `json:"version"`

	// Controls the visibility of content across projects<p>Possible values:</p>
	// <ul>
	// <li><b>Private</b>: Content is only visible to current user in current game</li>
	// <li><b>PublicGame</b>: Content is visible to any users in current game</li>
	// <li><b>PublicGlobal</b>: Content is visible to all shared games</li>
	// <li><b>Hidden</b>: Content is hidden because Reports exceeds project threshold</li>
	//
	// </ul>
	Visibility *ContentVisibility `json:"visibility,omitempty"`
}

// ContentDTOPagedResult defines model for ContentDTOPagedResult.
type ContentDTOPagedResult struct {
	Limit   int32        `json:"limit"`
	Offset  int32        `json:"offset"`
	Results []ContentDTO `json:"results"`
	Total   int32        `json:"total"`
}

// ContentRatingRequest defines model for ContentRatingRequest.
type ContentRatingRequest struct {
	Rating *float32 `json:"rating,omitempty"`
}

// ContentUploadStatus defines model for ContentUploadStatus.
type ContentUploadStatus string

// Response for getting content user rating info
type ContentUserRatingDTO struct {
	// Content the rating applies to
	ContentId string `json:"contentId"`

	// Date rating was first created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id of content rating
	Id string `json:"id"`

	// User rating
	Rating *float32 `json:"rating,omitempty"`

	// Date rating was updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Id of user providing rating
	UserId string `json:"userId"`
}

// Controls the visibility of content across projects<p>Possible values:</p>
// <ul>
// <li><b>Private</b>: Content is only visible to current user in current game</li>
// <li><b>PublicGame</b>: Content is visible to any users in current game</li>
// <li><b>PublicGlobal</b>: Content is visible to all shared games</li>
// <li><b>Hidden</b>: Content is hidden because Reports exceeds project threshold</li>
//
// </ul>
type ContentVisibility string

// Create a new content item
type NewContentRequest struct {
	// A base64 encoded representation of the Content binary
	// that will be uploaded. Used as a checksum.
	ContentMd5Hash string `json:"contentMd5Hash"`

	// Description of the content
	Description string `json:"description"`

	// Display name of the content
	Name string `json:"name"`

	// Tag Ids of the content
	TagIds *[]string `json:"tagIds"`

	// A base64 encoded representation of the Thumbnail file
	// that will be uploaded. Used as a checksum.
	ThumbnailMd5Hash *string `json:"thumbnailMd5Hash"`

	// Controls the visibility of content across projects<p>Possible values:</p>
	// <ul>
	// <li><b>Private</b>: Content is only visible to current user in current game</li>
	// <li><b>PublicGame</b>: Content is visible to any users in current game</li>
	// <li><b>PublicGlobal</b>: Content is visible to all shared games</li>
	// <li><b>Hidden</b>: Content is hidden because Reports exceeds project threshold</li>
	//
	// </ul>
	Visibility *ContentVisibility `json:"visibility,omitempty"`
}

// Request to reset the reports of a Content and set a new Visibility
type ResetReportsRequest struct {
	// Controls the visibility of content across projects<p>Possible values:</p>
	// <ul>
	// <li><b>Private</b>: Content is only visible to current user in current game</li>
	// <li><b>PublicGame</b>: Content is visible to any users in current game</li>
	// <li><b>PublicGlobal</b>: Content is visible to all shared games</li>
	// <li><b>Hidden</b>: Content is hidden because Reports exceeds project threshold</li>
	//
	// </ul>
	Visibility *ContentVisibility `json:"visibility,omitempty"`
}

// Response for getting tag info
type TagDTO struct {
	// Tag item guid
	Id *string `json:"id"`

	// Display name
	Name *string `json:"name"`
}

// Update the meta data about a content item
type UpdateContentRequest struct {
	// New Content Type id or zero to ignore
	ContentTypeId *int32 `json:"contentTypeId,omitempty"`

	// New description or null to ignore
	Description string `json:"description"`

	// New name or null to ignore
	Name   string    `json:"name"`
	TagsId *[]string `json:"tagsId"`

	// Controls the visibility of content across projects<p>Possible values:</p>
	// <ul>
	// <li><b>Private</b>: Content is only visible to current user in current game</li>
	// <li><b>PublicGame</b>: Content is visible to any users in current game</li>
	// <li><b>PublicGlobal</b>: Content is visible to all shared games</li>
	// <li><b>Hidden</b>: Content is hidden because Reports exceeds project threshold</li>
	//
	// </ul>
	Visibility *ContentVisibility `json:"visibility,omitempty"`
}

// New content creation response
type UploadContentResponse struct {
	// Response for getting content info
	Content *ContentDTO `json:"content,omitempty"`

	// The headers that were used when generating the Content signed url.
	// Forward these when uploading to the UploadContentUrl
	UploadContentHeaders *UploadContentResponse_UploadContentHeaders `json:"uploadContentHeaders"`

	// The URL in which to upload the content.
	// Once the Content is successfully uploaded,
	// the Content will be created in UGC and the
	// OptimisticContentDTO can be used safely.
	UploadContentUrl *string `json:"uploadContentUrl"`

	// The headers that were used when generating the Thumbnail signed url.
	// Forward these when uploading to the UploadThumbnailUrl
	UploadThumbnailHeaders *UploadContentResponse_UploadThumbnailHeaders `json:"uploadThumbnailHeaders"`

	// The URL in which to upload the content's thumbnail image
	UploadThumbnailUrl *string `json:"uploadThumbnailUrl"`
}

// The headers that were used when generating the Content signed url.
// Forward these when uploading to the UploadContentUrl
type UploadContentResponse_UploadContentHeaders struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// The headers that were used when generating the Thumbnail signed url.
// Forward these when uploading to the UploadThumbnailUrl
type UploadContentResponse_UploadThumbnailHeaders struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// S2SCreateContentJSONBody defines parameters for S2SCreateContent.
type S2SCreateContentJSONBody = NewContentRequest

// S2SSearchContentParams defines parameters for S2SSearchContent.
type S2SSearchContentParams struct {
	ReportType *string   `form:"reportType,omitempty" json:"reportType,omitempty"`
	Offset     *int32    `form:"offset,omitempty" json:"offset,omitempty"`
	Limit      *int32    `form:"limit,omitempty" json:"limit,omitempty"`
	SortBys    *[]string `form:"sortBys,omitempty" json:"sortBys,omitempty"`
	Search     *string   `form:"search,omitempty" json:"search,omitempty"`
	Tags       *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	Filters    *[]string `form:"filters,omitempty" json:"filters,omitempty"`
}

// S2SUpdateDetailsJSONBody defines parameters for S2SUpdateDetails.
type S2SUpdateDetailsJSONBody = UpdateContentRequest

// S2SCreateUserRatingJSONBody defines parameters for S2SCreateUserRating.
type S2SCreateUserRatingJSONBody = ContentRatingRequest

// S2SResetReportsJSONBody defines parameters for S2SResetReports.
type S2SResetReportsJSONBody = ResetReportsRequest

// S2SCreateContentVersionJSONBody defines parameters for S2SCreateContentVersion.
type S2SCreateContentVersionJSONBody = AddVersionRequest

// S2SCreateContentJSONRequestBody defines body for S2SCreateContent for application/json ContentType.
type S2SCreateContentJSONRequestBody = S2SCreateContentJSONBody

// S2SUpdateDetailsJSONRequestBody defines body for S2SUpdateDetails for application/json ContentType.
type S2SUpdateDetailsJSONRequestBody = S2SUpdateDetailsJSONBody

// S2SCreateUserRatingJSONRequestBody defines body for S2SCreateUserRating for application/json ContentType.
type S2SCreateUserRatingJSONRequestBody = S2SCreateUserRatingJSONBody

// S2SResetReportsJSONRequestBody defines body for S2SResetReports for application/json ContentType.
type S2SResetReportsJSONRequestBody = S2SResetReportsJSONBody

// S2SCreateContentVersionJSONRequestBody defines body for S2SCreateContentVersion for application/json ContentType.
type S2SCreateContentVersionJSONRequestBody = S2SCreateContentVersionJSONBody

// Getter for additional properties for UploadContentResponse_UploadContentHeaders. Returns the specified
// element and whether it was found
func (a UploadContentResponse_UploadContentHeaders) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UploadContentResponse_UploadContentHeaders
func (a *UploadContentResponse_UploadContentHeaders) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UploadContentResponse_UploadContentHeaders to handle AdditionalProperties
func (a *UploadContentResponse_UploadContentHeaders) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UploadContentResponse_UploadContentHeaders to handle AdditionalProperties
func (a UploadContentResponse_UploadContentHeaders) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UploadContentResponse_UploadThumbnailHeaders. Returns the specified
// element and whether it was found
func (a UploadContentResponse_UploadThumbnailHeaders) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UploadContentResponse_UploadThumbnailHeaders
func (a *UploadContentResponse_UploadThumbnailHeaders) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UploadContentResponse_UploadThumbnailHeaders to handle AdditionalProperties
func (a *UploadContentResponse_UploadThumbnailHeaders) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UploadContentResponse_UploadThumbnailHeaders to handle AdditionalProperties
func (a UploadContentResponse_UploadThumbnailHeaders) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// S2SCreateContent request with any body
	S2SCreateContentWithBody(ctx context.Context, projectId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	S2SCreateContent(ctx context.Context, projectId string, environmentId string, body S2SCreateContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SSearchContent request
	S2SSearchContent(ctx context.Context, projectId string, environmentId string, params *S2SSearchContentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SDeleteContent request
	S2SDeleteContent(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SGetContent request
	S2SGetContent(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SUpdateDetails request with any body
	S2SUpdateDetailsWithBody(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	S2SUpdateDetails(ctx context.Context, projectId string, environmentId string, contentId string, body S2SUpdateDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SGetUserRating request
	S2SGetUserRating(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SCreateUserRating request with any body
	S2SCreateUserRatingWithBody(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	S2SCreateUserRating(ctx context.Context, projectId string, environmentId string, contentId string, body S2SCreateUserRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SReport request
	S2SReport(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SResetReports request with any body
	S2SResetReportsWithBody(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	S2SResetReports(ctx context.Context, projectId string, environmentId string, contentId string, body S2SResetReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SRestore request
	S2SRestore(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// S2SCreateContentVersion request with any body
	S2SCreateContentVersionWithBody(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	S2SCreateContentVersion(ctx context.Context, projectId string, environmentId string, contentId string, body S2SCreateContentVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) S2SCreateContentWithBody(ctx context.Context, projectId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SCreateContentRequestWithBody(c.Server, projectId, environmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SCreateContent(ctx context.Context, projectId string, environmentId string, body S2SCreateContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SCreateContentRequest(c.Server, projectId, environmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SSearchContent(ctx context.Context, projectId string, environmentId string, params *S2SSearchContentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SSearchContentRequest(c.Server, projectId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SDeleteContent(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SDeleteContentRequest(c.Server, projectId, environmentId, contentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SGetContent(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SGetContentRequest(c.Server, projectId, environmentId, contentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SUpdateDetailsWithBody(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SUpdateDetailsRequestWithBody(c.Server, projectId, environmentId, contentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SUpdateDetails(ctx context.Context, projectId string, environmentId string, contentId string, body S2SUpdateDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SUpdateDetailsRequest(c.Server, projectId, environmentId, contentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SGetUserRating(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SGetUserRatingRequest(c.Server, projectId, environmentId, contentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SCreateUserRatingWithBody(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SCreateUserRatingRequestWithBody(c.Server, projectId, environmentId, contentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SCreateUserRating(ctx context.Context, projectId string, environmentId string, contentId string, body S2SCreateUserRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SCreateUserRatingRequest(c.Server, projectId, environmentId, contentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SReport(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SReportRequest(c.Server, projectId, environmentId, contentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SResetReportsWithBody(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SResetReportsRequestWithBody(c.Server, projectId, environmentId, contentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SResetReports(ctx context.Context, projectId string, environmentId string, contentId string, body S2SResetReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SResetReportsRequest(c.Server, projectId, environmentId, contentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SRestore(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SRestoreRequest(c.Server, projectId, environmentId, contentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SCreateContentVersionWithBody(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SCreateContentVersionRequestWithBody(c.Server, projectId, environmentId, contentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) S2SCreateContentVersion(ctx context.Context, projectId string, environmentId string, contentId string, body S2SCreateContentVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewS2SCreateContentVersionRequest(c.Server, projectId, environmentId, contentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewS2SCreateContentRequest calls the generic S2SCreateContent builder with application/json body
func NewS2SCreateContentRequest(server string, projectId string, environmentId string, body S2SCreateContentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewS2SCreateContentRequestWithBody(server, projectId, environmentId, "application/json", bodyReader)
}

// NewS2SCreateContentRequestWithBody generates requests for S2SCreateContent with any type of body
func NewS2SCreateContentRequestWithBody(server string, projectId string, environmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewS2SSearchContentRequest generates requests for S2SSearchContent
func NewS2SSearchContentRequest(server string, projectId string, environmentId string, params *S2SSearchContentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/search", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ReportType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reportType", runtime.ParamLocationQuery, *params.ReportType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBys != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBys", runtime.ParamLocationQuery, *params.SortBys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewS2SDeleteContentRequest generates requests for S2SDeleteContent
func NewS2SDeleteContentRequest(server string, projectId string, environmentId string, contentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewS2SGetContentRequest generates requests for S2SGetContent
func NewS2SGetContentRequest(server string, projectId string, environmentId string, contentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewS2SUpdateDetailsRequest calls the generic S2SUpdateDetails builder with application/json body
func NewS2SUpdateDetailsRequest(server string, projectId string, environmentId string, contentId string, body S2SUpdateDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewS2SUpdateDetailsRequestWithBody(server, projectId, environmentId, contentId, "application/json", bodyReader)
}

// NewS2SUpdateDetailsRequestWithBody generates requests for S2SUpdateDetails with any type of body
func NewS2SUpdateDetailsRequestWithBody(server string, projectId string, environmentId string, contentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s/details", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewS2SGetUserRatingRequest generates requests for S2SGetUserRating
func NewS2SGetUserRatingRequest(server string, projectId string, environmentId string, contentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s/rating", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewS2SCreateUserRatingRequest calls the generic S2SCreateUserRating builder with application/json body
func NewS2SCreateUserRatingRequest(server string, projectId string, environmentId string, contentId string, body S2SCreateUserRatingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewS2SCreateUserRatingRequestWithBody(server, projectId, environmentId, contentId, "application/json", bodyReader)
}

// NewS2SCreateUserRatingRequestWithBody generates requests for S2SCreateUserRating with any type of body
func NewS2SCreateUserRatingRequestWithBody(server string, projectId string, environmentId string, contentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s/rating", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewS2SReportRequest generates requests for S2SReport
func NewS2SReportRequest(server string, projectId string, environmentId string, contentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s/report", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewS2SResetReportsRequest calls the generic S2SResetReports builder with application/json body
func NewS2SResetReportsRequest(server string, projectId string, environmentId string, contentId string, body S2SResetReportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewS2SResetReportsRequestWithBody(server, projectId, environmentId, contentId, "application/json", bodyReader)
}

// NewS2SResetReportsRequestWithBody generates requests for S2SResetReports with any type of body
func NewS2SResetReportsRequestWithBody(server string, projectId string, environmentId string, contentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s/resetreports", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewS2SRestoreRequest generates requests for S2SRestore
func NewS2SRestoreRequest(server string, projectId string, environmentId string, contentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s/restore", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewS2SCreateContentVersionRequest calls the generic S2SCreateContentVersion builder with application/json body
func NewS2SCreateContentVersionRequest(server string, projectId string, environmentId string, contentId string, body S2SCreateContentVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewS2SCreateContentVersionRequestWithBody(server, projectId, environmentId, contentId, "application/json", bodyReader)
}

// NewS2SCreateContentVersionRequestWithBody generates requests for S2SCreateContentVersion with any type of body
func NewS2SCreateContentVersionRequestWithBody(server string, projectId string, environmentId string, contentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentId", runtime.ParamLocationPath, contentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/s2s/projects/%s/environments/%s/content/%s/version", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// S2SCreateContent request with any body
	S2SCreateContentWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SCreateContentResponse, error)

	S2SCreateContentWithResponse(ctx context.Context, projectId string, environmentId string, body S2SCreateContentJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SCreateContentResponse, error)

	// S2SSearchContent request
	S2SSearchContentWithResponse(ctx context.Context, projectId string, environmentId string, params *S2SSearchContentParams, reqEditors ...RequestEditorFn) (*S2SSearchContentResponse, error)

	// S2SDeleteContent request
	S2SDeleteContentWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SDeleteContentResponse, error)

	// S2SGetContent request
	S2SGetContentWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SGetContentResponse, error)

	// S2SUpdateDetails request with any body
	S2SUpdateDetailsWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SUpdateDetailsResponse, error)

	S2SUpdateDetailsWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, body S2SUpdateDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SUpdateDetailsResponse, error)

	// S2SGetUserRating request
	S2SGetUserRatingWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SGetUserRatingResponse, error)

	// S2SCreateUserRating request with any body
	S2SCreateUserRatingWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SCreateUserRatingResponse, error)

	S2SCreateUserRatingWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, body S2SCreateUserRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SCreateUserRatingResponse, error)

	// S2SReport request
	S2SReportWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SReportResponse, error)

	// S2SResetReports request with any body
	S2SResetReportsWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SResetReportsResponse, error)

	S2SResetReportsWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, body S2SResetReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SResetReportsResponse, error)

	// S2SRestore request
	S2SRestoreWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SRestoreResponse, error)

	// S2SCreateContentVersion request with any body
	S2SCreateContentVersionWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SCreateContentVersionResponse, error)

	S2SCreateContentVersionWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, body S2SCreateContentVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SCreateContentVersionResponse, error)
}

type S2SCreateContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadContentResponse
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SCreateContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SCreateContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SSearchContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentDTOPagedResult
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SSearchContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SSearchContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SDeleteContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SDeleteContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SDeleteContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SGetContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentDTO
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SGetContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SGetContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SUpdateDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentDTO
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SUpdateDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SUpdateDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SGetUserRatingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentUserRatingDTO
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SGetUserRatingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SGetUserRatingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SCreateUserRatingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentUserRatingDTO
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SCreateUserRatingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SCreateUserRatingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentDTO
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SResetReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentDTO
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SResetReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SResetReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentDTO
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type S2SCreateContentVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadContentResponse
	JSON400      *ApiErrorInfo
	JSON404      *ApiErrorInfo
}

// Status returns HTTPResponse.Status
func (r S2SCreateContentVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r S2SCreateContentVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// S2SCreateContentWithBodyWithResponse request with arbitrary body returning *S2SCreateContentResponse
func (c *ClientWithResponses) S2SCreateContentWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SCreateContentResponse, error) {
	rsp, err := c.S2SCreateContentWithBody(ctx, projectId, environmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SCreateContentResponse(rsp)
}

func (c *ClientWithResponses) S2SCreateContentWithResponse(ctx context.Context, projectId string, environmentId string, body S2SCreateContentJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SCreateContentResponse, error) {
	rsp, err := c.S2SCreateContent(ctx, projectId, environmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SCreateContentResponse(rsp)
}

// S2SSearchContentWithResponse request returning *S2SSearchContentResponse
func (c *ClientWithResponses) S2SSearchContentWithResponse(ctx context.Context, projectId string, environmentId string, params *S2SSearchContentParams, reqEditors ...RequestEditorFn) (*S2SSearchContentResponse, error) {
	rsp, err := c.S2SSearchContent(ctx, projectId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SSearchContentResponse(rsp)
}

// S2SDeleteContentWithResponse request returning *S2SDeleteContentResponse
func (c *ClientWithResponses) S2SDeleteContentWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SDeleteContentResponse, error) {
	rsp, err := c.S2SDeleteContent(ctx, projectId, environmentId, contentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SDeleteContentResponse(rsp)
}

// S2SGetContentWithResponse request returning *S2SGetContentResponse
func (c *ClientWithResponses) S2SGetContentWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SGetContentResponse, error) {
	rsp, err := c.S2SGetContent(ctx, projectId, environmentId, contentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SGetContentResponse(rsp)
}

// S2SUpdateDetailsWithBodyWithResponse request with arbitrary body returning *S2SUpdateDetailsResponse
func (c *ClientWithResponses) S2SUpdateDetailsWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SUpdateDetailsResponse, error) {
	rsp, err := c.S2SUpdateDetailsWithBody(ctx, projectId, environmentId, contentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SUpdateDetailsResponse(rsp)
}

func (c *ClientWithResponses) S2SUpdateDetailsWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, body S2SUpdateDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SUpdateDetailsResponse, error) {
	rsp, err := c.S2SUpdateDetails(ctx, projectId, environmentId, contentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SUpdateDetailsResponse(rsp)
}

// S2SGetUserRatingWithResponse request returning *S2SGetUserRatingResponse
func (c *ClientWithResponses) S2SGetUserRatingWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SGetUserRatingResponse, error) {
	rsp, err := c.S2SGetUserRating(ctx, projectId, environmentId, contentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SGetUserRatingResponse(rsp)
}

// S2SCreateUserRatingWithBodyWithResponse request with arbitrary body returning *S2SCreateUserRatingResponse
func (c *ClientWithResponses) S2SCreateUserRatingWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SCreateUserRatingResponse, error) {
	rsp, err := c.S2SCreateUserRatingWithBody(ctx, projectId, environmentId, contentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SCreateUserRatingResponse(rsp)
}

func (c *ClientWithResponses) S2SCreateUserRatingWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, body S2SCreateUserRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SCreateUserRatingResponse, error) {
	rsp, err := c.S2SCreateUserRating(ctx, projectId, environmentId, contentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SCreateUserRatingResponse(rsp)
}

// S2SReportWithResponse request returning *S2SReportResponse
func (c *ClientWithResponses) S2SReportWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SReportResponse, error) {
	rsp, err := c.S2SReport(ctx, projectId, environmentId, contentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SReportResponse(rsp)
}

// S2SResetReportsWithBodyWithResponse request with arbitrary body returning *S2SResetReportsResponse
func (c *ClientWithResponses) S2SResetReportsWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SResetReportsResponse, error) {
	rsp, err := c.S2SResetReportsWithBody(ctx, projectId, environmentId, contentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SResetReportsResponse(rsp)
}

func (c *ClientWithResponses) S2SResetReportsWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, body S2SResetReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SResetReportsResponse, error) {
	rsp, err := c.S2SResetReports(ctx, projectId, environmentId, contentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SResetReportsResponse(rsp)
}

// S2SRestoreWithResponse request returning *S2SRestoreResponse
func (c *ClientWithResponses) S2SRestoreWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, reqEditors ...RequestEditorFn) (*S2SRestoreResponse, error) {
	rsp, err := c.S2SRestore(ctx, projectId, environmentId, contentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SRestoreResponse(rsp)
}

// S2SCreateContentVersionWithBodyWithResponse request with arbitrary body returning *S2SCreateContentVersionResponse
func (c *ClientWithResponses) S2SCreateContentVersionWithBodyWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*S2SCreateContentVersionResponse, error) {
	rsp, err := c.S2SCreateContentVersionWithBody(ctx, projectId, environmentId, contentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SCreateContentVersionResponse(rsp)
}

func (c *ClientWithResponses) S2SCreateContentVersionWithResponse(ctx context.Context, projectId string, environmentId string, contentId string, body S2SCreateContentVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*S2SCreateContentVersionResponse, error) {
	rsp, err := c.S2SCreateContentVersion(ctx, projectId, environmentId, contentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseS2SCreateContentVersionResponse(rsp)
}

// ParseS2SCreateContentResponse parses an HTTP response from a S2SCreateContentWithResponse call
func ParseS2SCreateContentResponse(rsp *http.Response) (*S2SCreateContentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SCreateContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SSearchContentResponse parses an HTTP response from a S2SSearchContentWithResponse call
func ParseS2SSearchContentResponse(rsp *http.Response) (*S2SSearchContentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SSearchContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentDTOPagedResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SDeleteContentResponse parses an HTTP response from a S2SDeleteContentWithResponse call
func ParseS2SDeleteContentResponse(rsp *http.Response) (*S2SDeleteContentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SDeleteContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SGetContentResponse parses an HTTP response from a S2SGetContentWithResponse call
func ParseS2SGetContentResponse(rsp *http.Response) (*S2SGetContentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SGetContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SUpdateDetailsResponse parses an HTTP response from a S2SUpdateDetailsWithResponse call
func ParseS2SUpdateDetailsResponse(rsp *http.Response) (*S2SUpdateDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SUpdateDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SGetUserRatingResponse parses an HTTP response from a S2SGetUserRatingWithResponse call
func ParseS2SGetUserRatingResponse(rsp *http.Response) (*S2SGetUserRatingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SGetUserRatingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentUserRatingDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SCreateUserRatingResponse parses an HTTP response from a S2SCreateUserRatingWithResponse call
func ParseS2SCreateUserRatingResponse(rsp *http.Response) (*S2SCreateUserRatingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SCreateUserRatingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentUserRatingDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SReportResponse parses an HTTP response from a S2SReportWithResponse call
func ParseS2SReportResponse(rsp *http.Response) (*S2SReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SResetReportsResponse parses an HTTP response from a S2SResetReportsWithResponse call
func ParseS2SResetReportsResponse(rsp *http.Response) (*S2SResetReportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SResetReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SRestoreResponse parses an HTTP response from a S2SRestoreWithResponse call
func ParseS2SRestoreResponse(rsp *http.Response) (*S2SRestoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseS2SCreateContentVersionResponse parses an HTTP response from a S2SCreateContentVersionWithResponse call
func ParseS2SCreateContentVersionResponse(rsp *http.Response) (*S2SCreateContentVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &S2SCreateContentVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
